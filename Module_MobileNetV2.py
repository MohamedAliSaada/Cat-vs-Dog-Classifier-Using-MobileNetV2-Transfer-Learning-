# -*- coding: utf-8 -*-
"""Module.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1bFzsbYAyWYXd7wwetGfPK-2VTaLJCxLR
"""

#!pip install -U tensorflow

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
from PIL import Image
from io import BytesIO

import tensorflow as tf
from tensorflow.keras.applications import MobileNetV2
from tensorflow.keras.callbacks import EarlyStopping
from tensorflow.keras.models import Model
from tensorflow.keras.layers import Dense, Dropout, GlobalAveragePooling2D, Input
from tensorflow.keras.optimizers import Adam

# Load dataset from Hugging Face
splits = {
    'train': 'data/train-00000-of-00001.parquet'
}
df = pd.read_parquet("hf://datasets/Bingsu/Cat_and_Dog/" + splits["train"])

# Shuffle and subset data if need
#df = df.sample(frac=1).reset_index(drop=True)
#df = df[:4000]

# Set image parameters
img_h, img_w, img_c = 224, 224, 3

# Image preprocessing
def img_to_array(x):
    img_b = BytesIO(x['bytes'])
    img = Image.open(img_b).convert('RGB')
    img = img.resize((img_h, img_w))
    img_arr = np.array(img) /255.0
    return img_arr

# Convert images and labels
x_train = np.stack(df['image'].apply(img_to_array).tolist(), axis=0).astype('float16')
y_train = df['labels'].values.astype('int8')

# Build pretrained model
base_model = MobileNetV2(include_top=False, weights='imagenet', input_shape=(img_h, img_w, img_c))
base_model.trainable = False  # Freeze base model

inputs = Input(shape=(img_h, img_w, img_c))
x = base_model(inputs, training=False)
x = GlobalAveragePooling2D()(x)
x = Dropout(0.5)(x)
x = Dense(64, activation='relu')(x)
x = Dropout(0.5)(x)
outputs = Dense(1, activation='sigmoid')(x)  # Binary output

Module = Model(inputs, outputs)

# Compile model
Module.compile(
    optimizer=Adam(),
    loss='binary_crossentropy',
    metrics=['accuracy']
)

early_stop=EarlyStopping(monitor="val_loss",patience=4,restore_best_weights=True)

# Train model
history = Module.fit(
    x_train, y_train,
    epochs=50,
    batch_size=128,
    validation_split=0.20,
    callbacks=[early_stop]
)

# Plot training history
plt.figure(figsize=(10, 6))

plt.subplot(2, 2, 1)
plt.plot(history.history['accuracy'], label='Train Accuracy', color='red')
plt.xlabel("Epochs")
plt.ylabel("Accuracy")
plt.legend()
plt.grid(True)

plt.subplot(2, 2, 2)
plt.plot(history.history['val_accuracy'], label='Val Accuracy', color='blue')
plt.xlabel("Epochs")
plt.ylabel("Val Accuracy")
plt.legend()
plt.grid(True)

plt.subplot(2, 2, 3)
plt.plot(history.history['loss'], label='Train Loss', color='red')
plt.xlabel("Epochs")
plt.ylabel("Loss")
plt.legend()
plt.grid(True)

plt.subplot(2, 2, 4)
plt.plot(history.history['val_loss'], label='Val Loss', color='blue')
plt.xlabel("Epochs")
plt.ylabel("Val Loss")
plt.legend()
plt.grid(True)

plt.tight_layout()
plt.show()



#evaluate my module using test data.
del df,x_train, y_train

splits = {'train': 'data/train-00000-of-00001.parquet', 'test': 'data/test-00000-of-00001.parquet'}
df = pd.read_parquet("hf://datasets/Bingsu/Cat_and_Dog/" + splits["test"])
# Convert images and labels
x_test = np.stack(df['image'].apply(img_to_array).tolist(), axis=0).astype('float16')
y_test = df['labels'].values.astype('int8')

Module.evaluate(x_test,y_test)

# Define image size (MobileNetV2 standard input size)
img_h, img_w = 224, 224

# Load model for inference
model = load_model('Module_MobileNetV2.keras')

# Paths and true labels
img_paths = ['/content/1.jpg',
             '/content/2.jpg',
             '/content/3.jpg',
             '/content/4.jpg',
             '/content/5.jpg',
             '/content/6.jpg']

true_labels = [0, 0, 0, 0, 1, 1]

def prepare_img(path):
    img = Image.open(path).convert('RGB')
    img = img.resize((img_w, img_h))
    arr = np.array(img) / 255.0
    return arr

# Prepare images as numpy array
imgs = [prepare_img(p) for p in img_paths]
images = np.stack(imgs, axis=0).astype('float32')

# Predict
pred = model.predict(images)
pred_labels = (pred > 0.5).astype(int).flatten()

# Visualization
fig, axis = plt.subplots(2, 3, figsize=(12, 5))
for i, ax in enumerate(axis.flat):
    ax.imshow(images[i])  # Images are in [0,1], so no need to un-preprocess
    ax.set_title(f'Actual: {true_labels[i]}, Predicted: {pred_labels[i]}')
    ax.axis('off')

plt.tight_layout()
plt.show()

